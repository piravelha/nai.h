#include "../../nai.h"

typedef enum {
    TYPE_STRING,
    TYPE_INT,
    TYPE_FLOAT,
    TYPE_BOOL,
} Type;

typedef struct {
    String_View name;
    Type type;
} Field;

typedef Array(Field) Fields;

const char *type_name[] = {
    "const char *", "int ", "float ", "bool ",
};

const char *type_fmt[] = {
    "\\\"%s\\\"", "%d", "%f", "%s",
};

const char *type_arg[] = {
    "%s", "%s", "%s", "%s ? \"true\" : \"false\"",
};

Fields parse_fields(String_View txt)
{
    Fields fields = {0};
    
    while (txt.count) {
        String_View name = sv_chop(&txt, ':');
        String_View type_str = sv_chop_space(&txt);

        Type type;

        if (sv_equals(type_str, "STRING")) type = TYPE_STRING;
        else if (sv_equals(type_str, "INT")) type = TYPE_INT;
        else if (sv_equals(type_str, "FLOAT")) type = TYPE_FLOAT;
        else if (sv_equals(type_str, "BOOL")) type = TYPE_BOOL;
        else assert(0 && "invalid type");

        array_append(&fields, (Field) {
            .name = name,
            .type = type,
        });
    }

    return fields;
}


int main(int argc, char **argv)
{
    REBUILD(argc, argv);

    String_Builder person_txt = {0};
    if (!read_file("person.txt", &person_txt)) return 1;

    Fields fields = parse_fields(sb_to_sv(person_txt));

    String_Builder gen = {0};
    sb_printf(&gen, "#include <stdbool.h>\n");
    sb_printf(&gen, "\n");
    sb_printf(&gen, "typedef struct {\n");

    for (size_t i=0; i < fields.count; ++i) {
        Field f = fields.items[i];

        sb_printf(&gen, "    %s"SV_FMT";\n",
            type_name[f.type], SV_ARG(f.name));
    }

    sb_printf(&gen, "} Person;\n");
    sb_printf(&gen, "\n");
    sb_printf(&gen, "void print_person(Person p)\n");
    sb_printf(&gen, "{\n");
    sb_printf(&gen, "    printf(\"(Person) {\\n\");\n");

    for (size_t i=0; i < fields.count; ++i) {
        Field f = fields.items[i];

        const char *p = temp_sprintf("p."SV_FMT, SV_ARG(f.name));
        const char *arg = temp_sprintf(type_arg[f.type], p);

        sb_printf(&gen, "    printf(\"    ."SV_FMT" = %s,\\n\", %s);\n",
            SV_ARG(f.name), type_fmt[f.type], arg);
    }
    
    sb_printf(&gen, "    printf(\"}\\n\");\n");
    sb_printf(&gen, "}\n");
    write_file("gen/person.c", gen);

    Cmd cmd = {0};
    cmd_append(&cmd, "cc", "main.c");
    cmd_append(&cmd, "-o", "build/main");
    cmd_run(cmd);

    return 0;
}
